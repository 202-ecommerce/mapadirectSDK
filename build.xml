<?xml version="1.0" encoding="UTF-8"?>

<project name="Mapadirect SDK" default="build" basedir=".">
    <property name="build-dir" value="${basedir}/build" />
    <property name="src-dir" value="${basedir}/src" />

    <target name="build"
        depends="build-common,pdepend,phpcs-ci,phpcpd,phpcb" />

    <target name="build-clean"
        depends="clean,build-common,pdepend,phpcs-ci,phpcpd,phpcb" />

    <target name="build-dox"
        depends="build-common,pdepend,phpcs-ci,phpcpd,phpcb" />

    <target name="build-dox-clean"
        depends="clean,build-common,pdepend,phpcs-ci,phpcpd,phpcb" />

    <target name="build-doc"
        depends="build-common,pdepend,phpcs-ci,phpcpd,phpcb,npm-install,doc" />

    <target name="build-doc-clean"
        depends="clean,build-common,pdepend,phpcs-ci,phpcpd,phpcb,npm,doc" />

    <target name="build-parallel"
        depends="build-common,tools-parallel" />

    <target name="build-parallel-clean"
        depends="clean,build-common,tools-parallel" />

    <target name="build-common" depends="lint,prepare,composer,phpunit,npm,doc" />

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpcs-ci" />
            </sequential>
            <antcall target="phpcb" />
            <antcall target="phpcpd" />
        </parallel>
    </target>

    <target name="clean" depends="clean-build,clean-composer" description="Cleanup build and composer artifacts" />

    <target name="clean-build" description="Cleanup build artifacts">
        <echo>Cleaning out the build artifacts</echo>
        <delete dir="${build-dir}/api" />
        <delete dir="${build-dir}/code-browser" />
        <delete dir="${build-dir}/coverage" />
        <delete dir="${build-dir}/doc_fr/" />
        <delete dir="${build-dir}/doc_en/" />
        <delete dir="${build-dir}/logs" />
        <delete dir="${build-dir}/pdepend" />
    </target>

    <target name="composer" depends="clean-composer,composer-install,composer-update" description="Install or update dependencies" />

    <target name="composer.check">
        <condition property="composer.lock.exist.in.gitignore">
            <resourcecontains resource="${basedir}/.gitignore" substring="composer.lock" />
        </condition>
    </target>

    <target name="clean-composer" depends="composer.check" if="composer.lock.exist.in.gitignore" description="Cleanup composer artifacts">
        <delete file="${basedir}/composer.lock" />
    </target>

    <target name="composer-install" depends="composer.check" unless="composer.lock.exist.in.gitignore" description="Installing dependencies">
        <echo>Installing dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="composer-update" depends="composer.check" if="composer.lock.exist.in.gitignore" description="Updating dependencies">
        <echo>Updating dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="update" />
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="false">
            <arg value="-l" />
            <fileset dir="${src-dir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="vendor/bin/pdepend">
            <arg value="--jdepend-xml=${build-dir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${build-dir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${build-dir}/pdepend/overview-pyramid.svg" />
            <arg path="${src-dir}" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="vendor/bin/phpcb">
            <arg value="--log" />
            <arg path="${build-dir}/logs" />
            <arg value="--source" />
            <arg path="${src-dir}" />
            <arg value="--output" />
            <arg path="${build-dir}/code-browser" />
        </exec>
    </target>

     <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="vendor/bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${build-dir}/logs/pmd-cpd.xml" />
            <arg path="${src-dir}" />
        </exec>
    </target>

    <target name="phpcs"
        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="vendor/bin/phpcs">
            <arg value="--standard=${build-dir}/phpcs.xml" />
            <arg path="${src-dir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="vendor/bin/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${build-dir}/logs/checkstyle.xml" />
            <arg value="--standard=${build-dir}/phpcs.xml" />
            <arg path="${src-dir}" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg value="-c" />
            <arg value="${basedir}/phpunit.xml.dist" />
            <arg value="--coverage-html" />
            <arg value="${build-dir}/coverage" />
            <arg value="--coverage-clover" />
            <arg value="${build-dir}/logs/clover.xml" />
            <arg value="--coverage-crap4j" />
            <arg value="${build-dir}/logs/crap4j.xml" />
            <arg value="--log-junit" />
            <arg value="${build-dir}/logs/junit.xml" />
        </exec>
    </target>

    <target name="prepare" depends="clean-build" description="Prepare for build">
        <echo>Making the build artifact folders</echo>
        <mkdir dir="${build-dir}/api" />
        <mkdir dir="${build-dir}/code-browser" />
        <mkdir dir="${build-dir}/coverage" />
        <mkdir dir="${build-dir}/logs" />
        <mkdir dir="${build-dir}/pdepend" />
        <mkdir dir="${build-dir}/doc_fr" />
        <mkdir dir="${build-dir}/doc_en" />
    </target>

    <target name="npm" depends="clean-npm,npm-install" description="Install or update node dependencies" />

    <target name="clean-npm" description="Empty node_modules folder">
        <delete dir="${basedir}/node_modules" />
    </target>

    <target name="npm-install" description="Installing node deps">
        <exec executable="npm">
            <arg value="install" />
        </exec>
    </target>

    <target name="doc" description="Build documentation mini site.">
        <exec executable="npm">
            <arg value="run" />
            <arg value="doc-build-en" />
        </exec>
    </target>

    <target name="doc" description="Build documentation mini site.">
        <exec executable="npm">
            <arg value="run" />
            <arg value="doc-build-fr" />
        </exec>
    </target>

</project>
